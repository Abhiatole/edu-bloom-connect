import { supabase } from '@/integrations/supabase/client';

export interface StudentRegistrationData {
  fullName: string;
  email: string;
  password: string;
  classLevel: string;
  guardianName?: string;
  guardianMobile?: string;
  parentMobile?: string;
  batches?: string[];  // Array of batch types like ['NEET', 'JEE']
  subjects?: string[]; // Array of subjects like ['Physics', 'Chemistry']
}

export interface RegistrationResult {
  success: boolean;
  message: string;
  user?: any;
  requiresEmailConfirmation?: boolean;
  enrollmentNumber?: string;
}

export class EnhancedRegistrationService {
  /**
   * Register a new student with complete batch and subject enrollment
   */
  static async registerStudent(data: StudentRegistrationData): Promise<RegistrationResult> {
    console.log('üöÄ Starting enhanced student registration...');
    console.log('üìù Registration data:', { ...data, password: '[HIDDEN]' });
    
    try {
      // Generate unique enrollment number
      const enrollmentNumber = await this.generateEnrollmentNumber();
      console.log('üìã Generated enrollment number:', enrollmentNumber);

      // Prepare user metadata for auth
      const userMetadata: any = {
        full_name: data.fullName,
        user_type: 'student',
        class_level: data.classLevel,
        guardian_name: data.guardianName,
        guardian_mobile: data.guardianMobile,
        parent_mobile: data.parentMobile,
        enrollment_number: enrollmentNumber
      };

      // Add batches and subjects as JSON strings to avoid array issues
      if (data.batches && data.batches.length > 0) {
        userMetadata.batches = JSON.stringify(data.batches);
      }
      if (data.subjects && data.subjects.length > 0) {
        userMetadata.subjects = JSON.stringify(data.subjects);
      }

      console.log('üìã Creating auth user with metadata...');

      const { data: authData, error: authError } = await supabase.auth.signUp({
        email: data.email,
        password: data.password,
        options: {
          data: userMetadata,
          emailRedirectTo: `${window.location.origin}/auth/confirm`
        }
      });

      if (authError) {
        console.error('‚ùå Auth signup error:', authError);
        throw new Error(`Authentication failed: ${authError.message}`);
      }

      if (!authData.user) {
        throw new Error('User creation failed - no user data returned');
      }

      console.log('‚úÖ Auth user created successfully:', authData.user.id);
      console.log('üìß Email confirmed:', !!authData.user.email_confirmed_at);

      const requiresConfirmation = !authData.session && !authData.user.email_confirmed_at;

      // If no email confirmation required, create profile immediately
      if (!requiresConfirmation && authData.session) {
        console.log('üîÑ No email confirmation needed, creating complete profile...');
        
        const result = await this.createCompleteStudentProfile(authData.user.id, data, authData.session);
        
        return {
          success: true,
          message: 'Student registered successfully. Your account is pending approval.',
          user: authData.user,
          enrollmentNumber: result.enrollmentNumber,
          requiresEmailConfirmation: false
        };
      }

      // Email confirmation required
      return {
        success: true,
        message: 'Registration successful! Please check your email to confirm your account.',
        user: authData.user,
        requiresEmailConfirmation: true
      };

    } catch (error: any) {
      console.error('üí• Registration failed completely:', error);
      throw new Error(error.message || 'Registration failed');
    }
  }

  /**
   * Create complete student profile with batch and subject enrollment
   */
  static async createCompleteStudentProfile(
    userId: string, 
    data: StudentRegistrationData, 
    session?: any
  ): Promise<{ enrollmentNumber: string }> {
    try {
      console.log('üìù Creating complete student profile for user:', userId);

      // Set session if available
      if (session) {
        await supabase.auth.setSession(session);
      }

      // Step 1: Create student profile using database function (if available)
      const profileData = {
        user_id: userId,
        enrollment_no: null, // Will be auto-generated by trigger
        class_level: parseInt(data.classLevel),
        parent_email: data.email,
        parent_phone: data.parentMobile || data.guardianMobile || '',
        status: 'PENDING' as const
      };

      console.log('üìã Creating student profile with data:', profileData);

      const { data: profileResult, error: profileError } = await supabase
        .from('student_profiles')
        .insert(profileData)
        .select()
        .single();

      if (profileError) {
        console.error('‚ùå Profile creation error:', profileError);
        throw new Error(`Profile creation failed: ${profileError.message}`);
      }

      const studentId = profileResult.id;
      const enrollmentNumber = profileResult.enrollment_no;

      console.log('‚úÖ Student profile created:', {
        studentId,
        enrollmentNumber
      });

      // Step 2: Enroll in batches (if provided)
      if (data.batches && data.batches.length > 0) {
        console.log('üìö Enrolling in batches:', data.batches);
        
        const { data: batchResult, error: batchError } = await supabase.rpc(
          'enroll_student_in_batches',
          {
            p_student_id: studentId,
            p_batch_names: data.batches
          }
        );

        if (batchError) {
          console.error('‚ùå Batch enrollment error:', batchError);
          // Don't fail the registration, just log the error
          console.warn('‚ö†Ô∏è Batch enrollment failed, but continuing with registration');
        } else {
          console.log('‚úÖ Batch enrollment successful:', batchResult);
        }
      }

      // Step 3: Enroll in subjects (if provided)
      if (data.subjects && data.subjects.length > 0) {
        console.log('üî¨ Enrolling in subjects:', data.subjects);
        
        const { data: subjectResult, error: subjectError } = await supabase.rpc(
          'enroll_student_in_subjects',
          {
            p_student_id: studentId,
            p_subject_names: data.subjects
          }
        );

        if (subjectError) {
          console.error('‚ùå Subject enrollment error:', subjectError);
          // Don't fail the registration, just log the error
          console.warn('‚ö†Ô∏è Subject enrollment failed, but continuing with registration');
        } else {
          console.log('‚úÖ Subject enrollment successful:', subjectResult);
        }
      }

      return {
        enrollmentNumber: enrollmentNumber || `STU${Date.now()}`
      };

    } catch (error: any) {
      console.error('üí• Complete profile creation failed:', error);
      throw new Error(`Failed to create complete profile: ${error.message}`);
    }
  }

  /**
   * Get student enrollments (subjects and batches)
   */
  static async getStudentEnrollments(studentId: string) {
    try {
      console.log('üìã Fetching student enrollments for:', studentId);

      const [subjectsResult, batchesResult] = await Promise.all([
        supabase
          .from('student_subjects')
          .select(`
            subject_id,
            subjects (
              id,
              name,
              description
            )
          `)
          .eq('student_id', studentId),
        supabase
          .from('student_batches')
          .select(`
            batch_id,
            batches (
              id,
              name,
              description
            )
          `)
          .eq('student_id', studentId)
      ]);

      if (subjectsResult.error) {
        console.error('‚ùå Subjects fetch error:', subjectsResult.error);
      }

      if (batchesResult.error) {
        console.error('‚ùå Batches fetch error:', batchesResult.error);
      }

      const subjects = (subjectsResult.data || [])
        .map(item => item.subjects)
        .filter(Boolean);

      const batches = (batchesResult.data || [])
        .map(item => item.batches)
        .filter(Boolean);

      console.log('‚úÖ Student enrollments fetched:', {
        subjects: subjects.length,
        batches: batches.length
      });

      return {
        subjects,
        batches
      };

    } catch (error: any) {
      console.error('üí• Failed to fetch enrollments:', error);
      return { subjects: [], batches: [] };
    }
  }

  /**
   * Handle email confirmation and create profile if needed
   */
  static async handleEmailConfirmation(userMetadata: any) {
    try {
      const { data: currentUser } = await supabase.auth.getUser();
      if (!currentUser.user) {
        throw new Error('User not found after email confirmation');
      }

      // Check if profile already exists
      const { data: existingProfile } = await supabase
        .from('student_profiles')
        .select('id')
        .eq('user_id', currentUser.user.id)
        .single();

      if (existingProfile) {
        console.log('‚úÖ Profile already exists, skipping creation');
        return;
      }

      // Extract data from metadata
      const registrationData: StudentRegistrationData = {
        fullName: userMetadata.full_name,
        email: currentUser.user.email!,
        password: '', // Not needed for profile creation
        classLevel: userMetadata.class_level,
        guardianName: userMetadata.guardian_name,
        guardianMobile: userMetadata.parent_mobile,
        parentMobile: userMetadata.parent_mobile,
        batches: userMetadata.batches ? JSON.parse(userMetadata.batches) : [],
        subjects: userMetadata.subjects ? JSON.parse(userMetadata.subjects) : []
      };

      console.log('üîÑ Creating profile after email confirmation...');
      await this.createCompleteStudentProfile(currentUser.user.id, registrationData);

    } catch (error: any) {
      console.error('üí• Email confirmation profile creation failed:', error);
      throw error;
    }
  }
}

export default EnhancedRegistrationService;
