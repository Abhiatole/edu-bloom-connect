import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Separator } from '@/components/ui/separator';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';
import ManualMarkUpload from '@/components/ManualMarkUpload';
import { Loader2 } from 'lucide-react';
import ErrorDetector from '@/components/debug/ErrorDetector';

// Minimal interfaces to match ManualMarkUpload component
interface Student {
  id: string;
  enrollment_no: string;
  display_name: string;
}

interface Exam {
  id: string;
  title: string;
  max_marks: number;
}

function ExamManagement() {
  const { toast } = useToast();
  
  // State
  const [students, setStudents] = useState<Student[]>([]);
  const [exams, setExams] = useState<Exam[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [activeTab, setActiveTab] = useState<string>('upload');
  const [selectedExam, setSelectedExam] = useState<string>('');
  
  // New exam form state
  const [newExamTitle, setNewExamTitle] = useState<string>('New Exam');
  const [newExamSubject, setNewExamSubject] = useState<string>('Physics');
  const [newExamType, setNewExamType] = useState<string>('Boards');
  const [newExamClassLevel, setNewExamClassLevel] = useState<number>(10);
  const [newExamMaxMarks, setNewExamMaxMarks] = useState<number>(100);
  const [newExamDate, setNewExamDate] = useState<string>(
    new Date().toISOString().split('T')[0] // Format as YYYY-MM-DD
  );
  
  useEffect(() => {
    loadData();
  }, []);
  
  const loadData = async () => {
    setLoading(true);
    
    try {
      // Simplified student loading with error handling
      try {
        const { data, error } = await supabase
          .from('student_profiles')
          .select('id');
        
        if (error) throw error;
        
        // Convert to our simplified Student interface with safer approach
        const mappedStudents = (data || []).map((student, index) => {
          // Use a more defensive approach with fallback to index-based names
          return {
            id: student.id || `student-${index}`,
            enrollment_no: `S${1000 + index}`,
            display_name: `Student ${index + 1}`
          };
        });
        
        setStudents(mappedStudents);
      } catch (err) {
        console.error('Error loading students:', err);
        // Fallback to empty array
        setStudents([]);
      }
      
      // Simplified exam loading with error handling
      try {
        const { data, error } = await supabase
          .from('exams')
          .select('id, title')
          .order('created_at', { ascending: false });
        
        if (error) throw error;
        
        // Convert to our simplified Exam interface
        const mappedExams = (data || []).map(e => ({
          id: e.id || `exam-${Math.random().toString(36).substring(7)}`,
          title: e.title || 'Untitled Exam',
          max_marks: 100 // Default since we don't know if this exists
        }));
        
        setExams(mappedExams);
      } catch (err) {
        console.error('Error loading exams:', err);
        // Fallback to empty array
        setExams([]);
      }
    } catch (err) {
      console.error('Error in loadData:', err);
      toast({
        title: 'Error',
        description: 'Failed to load data',
        variant: 'destructive'
      });
    } finally {
      setLoading(false);
    }
  };

  // Create exam function
  const handleCreateExam = async () => {
    try {
      const { data: session } = await supabase.auth.getSession();
      const userId = session?.session?.user?.id;
      
      if (!userId) {
        toast({
          title: 'Error',
          description: 'You must be logged in to create an exam',
          variant: 'destructive'
        });
        return;
      }
      
      // Create exam with user-provided fields
      const examData = {
        title: newExamTitle,
        exam_type: newExamType,
        subject: newExamSubject,
        class_level: newExamClassLevel,
        max_marks: newExamMaxMarks,
        created_by: userId,
        created_by_teacher_id: userId,
        exam_date: new Date(newExamDate).toISOString(),
      };
      
      console.log('Attempting to create exam with data:', examData);
      
      const { data, error } = await supabase
        .from('exams')
        .insert(examData as any)
        .select();
        
      if (error) {
        console.error('Error creating exam:', error);
        // Provide more detailed error message to help debugging
        let errorMsg = 'Failed to create exam';
        if (error.message) {
          errorMsg += `: ${error.message}`;
        }
        if (error.details) {
          errorMsg += ` (${error.details})`;
        }
        
        // If the first attempt fails due to schema issues, try with a more minimal set of fields
        if (error.message && (
            error.message.includes('column') || 
            error.message.includes('schema') || 
            error.message.includes('field')
        )) {
          console.log('First attempt failed due to schema issues, trying with minimal fields...');
          // Try with absolute minimal fields but use the user's title and date
          const minimalExamData = {
            title: newExamTitle,
            exam_type: newExamType,
            class_level: newExamClassLevel,
            max_marks: newExamMaxMarks,
            exam_date: new Date(newExamDate).toISOString()
          };
          
          const retryResult = await supabase
            .from('exams')
            .insert(minimalExamData as any)
            .select();
            
          if (retryResult.error) {
            console.error('Retry also failed:', retryResult.error);
            toast({
              title: 'Error',
              description: errorMsg,
              variant: 'destructive'
            });
            return;
          } else if (retryResult.data && retryResult.data.length > 0) {
            console.log('Retry succeeded with minimal fields');
            // Handle success case
            toast({
              title: 'Success',
              description: 'New exam created (with minimal fields)',
            });
            
            // Add to exams array
            setExams(prev => [
              {
                id: retryResult.data[0].id,
                title: retryResult.data[0].title || newExamTitle,
                max_marks: newExamMaxMarks
              },
              ...prev
            ]);
            
            // Refresh the data to ensure we have the latest list
            loadData();
            return;
          }
        }
        
        toast({
          title: 'Error',
          description: errorMsg,
          variant: 'destructive'
        });
        return;
      }
      
      if (data && data.length > 0) {
        toast({
          title: 'Success',
          description: 'New exam created',
        });
        
        // Add to exams array
        setExams(prev => [
          {
            id: data[0].id,
            title: data[0].title || newExamTitle,
            max_marks: newExamMaxMarks
          },
          ...prev
        ]);
        
        // Reset the form to default values
        setNewExamTitle('New Exam');
        setNewExamSubject('Physics');
        setNewExamType('Boards');
        setNewExamClassLevel(10);
        setNewExamMaxMarks(100);
        setNewExamDate(new Date().toISOString().split('T')[0]);
        
        // Refresh the data to ensure we have the latest list
        loadData();
      }
    } catch (err) {
      console.error('Error in handleCreateExam:', err);
      // Provide more specific error message for debugging
      let errorMessage = 'An unexpected error occurred';
      
      if (err && typeof err === 'object' && 'message' in err) {
        errorMessage = `Error: ${(err as Error).message}`;
      }
      
      toast({
        title: 'Error',
        description: errorMessage,
        variant: 'destructive'
      });
    }
  };
  
  if (loading) {
    return (
      <div className="flex h-full items-center justify-center">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
        <span className="ml-2">Loading...</span>
      </div>
    );
  }
  
  return (
    <div className="container mx-auto p-4 space-y-6">
      <h1 className="text-2xl font-bold">Exam Management</h1>
      
      <Tabs defaultValue="upload" value={activeTab} onValueChange={setActiveTab}>
        <TabsList className="mb-4">
          <TabsTrigger value="upload">Upload Results</TabsTrigger>
          <TabsTrigger value="create">Create Exam</TabsTrigger>
        </TabsList>
        
        <TabsContent value="upload" className="space-y-6">
          <Card>
            <CardContent className="p-6">
              <h2 className="text-xl font-semibold mb-4">Upload Exam Results</h2>
              
              <div className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="exam-select">Select Exam</Label>
                  <Select value={selectedExam} onValueChange={setSelectedExam}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select an exam" />
                    </SelectTrigger>
                    <SelectContent>
                      {exams.map(exam => (
                        <SelectItem key={exam.id} value={exam.id}>
                          {exam.title}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                
                <Separator />
                
                <div className="space-y-4">
                  <h3 className="font-medium">Manual Mark Entry</h3>
                  
                  <div>
                    <ManualMarkUpload 
                      exams={exams} 
                      students={students}
                      onSuccess={() => {
                        toast({
                          title: 'Success',
                          description: 'Marks uploaded successfully',
                        });
                      }}
                    />
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="create" className="space-y-6">
          <Card>
            <CardContent className="p-6">
              <h2 className="text-xl font-semibold mb-4">Create New Exam</h2>
              
              <div className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="exam-title">Exam Title</Label>
                  <Input 
                    id="exam-title" 
                    value={newExamTitle} 
                    onChange={(e) => setNewExamTitle(e.target.value)} 
                    placeholder="Enter exam title"
                  />
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="exam-subject">Subject</Label>
                    <Select value={newExamSubject} onValueChange={setNewExamSubject}>
                      <SelectTrigger>
                        <SelectValue placeholder="Select subject" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="Physics">Physics</SelectItem>
                        <SelectItem value="Chemistry">Chemistry</SelectItem>
                        <SelectItem value="Mathematics">Mathematics</SelectItem>
                        <SelectItem value="Biology">Biology</SelectItem>
                        <SelectItem value="English">English</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="exam-type">Exam Type</Label>
                    <Select value={newExamType} onValueChange={setNewExamType}>
                      <SelectTrigger>
                        <SelectValue placeholder="Select exam type" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="Boards">Boards</SelectItem>
                        <SelectItem value="JEE">JEE</SelectItem>
                        <SelectItem value="NEET">NEET</SelectItem>
                        <SelectItem value="CET">CET</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="exam-class">Class Level</Label>
                    <Select 
                      value={newExamClassLevel.toString()} 
                      onValueChange={(value) => setNewExamClassLevel(parseInt(value))}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select class" />
                      </SelectTrigger>
                      <SelectContent>
                        {[9, 10, 11, 12].map(level => (
                          <SelectItem key={level} value={level.toString()}>
                            Class {level}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="exam-max-marks">Maximum Marks</Label>
                    <Input 
                      id="exam-max-marks" 
                      type="number" 
                      value={newExamMaxMarks} 
                      onChange={(e) => setNewExamMaxMarks(parseInt(e.target.value))} 
                      min={1}
                    />
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="exam-date">Exam Date</Label>
                    <Input 
                      id="exam-date" 
                      type="date" 
                      value={newExamDate} 
                      onChange={(e) => setNewExamDate(e.target.value)} 
                    />
                  </div>
                </div>
                
                <div className="pt-4">
                  <Button onClick={handleCreateExam}>
                    Create Exam
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
      
      {/* Debug Error Detector - Only in development */}
      {process.env.NODE_ENV !== 'production' && (
        <div className="mt-8">
          <ErrorDetector />
        </div>
      )}
    </div>
  );
}

export default ExamManagement;
